// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: interaccion.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CazarrecompensasService_ConsultarPiratas_FullMethodName  = "/interaccion.CazarrecompensasService/ConsultarPiratas"
	CazarrecompensasService_RegistrarCaptura_FullMethodName  = "/interaccion.CazarrecompensasService/RegistrarCaptura"
	CazarrecompensasService_DecidirEntrega_FullMethodName    = "/interaccion.CazarrecompensasService/DecidirEntrega"
	CazarrecompensasService_TransportarPirata_FullMethodName = "/interaccion.CazarrecompensasService/TransportarPirata"
)

// CazarrecompensasServiceClient is the client API for CazarrecompensasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CazarrecompensasServiceClient interface {
	ConsultarPiratas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListaPiratas, error)
	RegistrarCaptura(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error)
	DecidirEntrega(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error)
	TransportarPirata(ctx context.Context, in *TransporteRequest, opts ...grpc.CallOption) (*TransporteResponse, error)
}

type cazarrecompensasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCazarrecompensasServiceClient(cc grpc.ClientConnInterface) CazarrecompensasServiceClient {
	return &cazarrecompensasServiceClient{cc}
}

func (c *cazarrecompensasServiceClient) ConsultarPiratas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListaPiratas, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaPiratas)
	err := c.cc.Invoke(ctx, CazarrecompensasService_ConsultarPiratas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cazarrecompensasServiceClient) RegistrarCaptura(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntregaResponse)
	err := c.cc.Invoke(ctx, CazarrecompensasService_RegistrarCaptura_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cazarrecompensasServiceClient) DecidirEntrega(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntregaResponse)
	err := c.cc.Invoke(ctx, CazarrecompensasService_DecidirEntrega_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cazarrecompensasServiceClient) TransportarPirata(ctx context.Context, in *TransporteRequest, opts ...grpc.CallOption) (*TransporteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransporteResponse)
	err := c.cc.Invoke(ctx, CazarrecompensasService_TransportarPirata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CazarrecompensasServiceServer is the server API for CazarrecompensasService service.
// All implementations must embed UnimplementedCazarrecompensasServiceServer
// for forward compatibility.
type CazarrecompensasServiceServer interface {
	ConsultarPiratas(context.Context, *Empty) (*ListaPiratas, error)
	RegistrarCaptura(context.Context, *EntregaRequest) (*EntregaResponse, error)
	DecidirEntrega(context.Context, *EntregaRequest) (*EntregaResponse, error)
	TransportarPirata(context.Context, *TransporteRequest) (*TransporteResponse, error)
	mustEmbedUnimplementedCazarrecompensasServiceServer()
}

// UnimplementedCazarrecompensasServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCazarrecompensasServiceServer struct{}

func (UnimplementedCazarrecompensasServiceServer) ConsultarPiratas(context.Context, *Empty) (*ListaPiratas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarPiratas not implemented")
}
func (UnimplementedCazarrecompensasServiceServer) RegistrarCaptura(context.Context, *EntregaRequest) (*EntregaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarCaptura not implemented")
}
func (UnimplementedCazarrecompensasServiceServer) DecidirEntrega(context.Context, *EntregaRequest) (*EntregaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecidirEntrega not implemented")
}
func (UnimplementedCazarrecompensasServiceServer) TransportarPirata(context.Context, *TransporteRequest) (*TransporteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransportarPirata not implemented")
}
func (UnimplementedCazarrecompensasServiceServer) mustEmbedUnimplementedCazarrecompensasServiceServer() {
}
func (UnimplementedCazarrecompensasServiceServer) testEmbeddedByValue() {}

// UnsafeCazarrecompensasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CazarrecompensasServiceServer will
// result in compilation errors.
type UnsafeCazarrecompensasServiceServer interface {
	mustEmbedUnimplementedCazarrecompensasServiceServer()
}

func RegisterCazarrecompensasServiceServer(s grpc.ServiceRegistrar, srv CazarrecompensasServiceServer) {
	// If the following call pancis, it indicates UnimplementedCazarrecompensasServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CazarrecompensasService_ServiceDesc, srv)
}

func _CazarrecompensasService_ConsultarPiratas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CazarrecompensasServiceServer).ConsultarPiratas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CazarrecompensasService_ConsultarPiratas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CazarrecompensasServiceServer).ConsultarPiratas(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CazarrecompensasService_RegistrarCaptura_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntregaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CazarrecompensasServiceServer).RegistrarCaptura(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CazarrecompensasService_RegistrarCaptura_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CazarrecompensasServiceServer).RegistrarCaptura(ctx, req.(*EntregaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CazarrecompensasService_DecidirEntrega_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntregaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CazarrecompensasServiceServer).DecidirEntrega(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CazarrecompensasService_DecidirEntrega_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CazarrecompensasServiceServer).DecidirEntrega(ctx, req.(*EntregaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CazarrecompensasService_TransportarPirata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransporteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CazarrecompensasServiceServer).TransportarPirata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CazarrecompensasService_TransportarPirata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CazarrecompensasServiceServer).TransportarPirata(ctx, req.(*TransporteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CazarrecompensasService_ServiceDesc is the grpc.ServiceDesc for CazarrecompensasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CazarrecompensasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaccion.CazarrecompensasService",
	HandlerType: (*CazarrecompensasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarPiratas",
			Handler:    _CazarrecompensasService_ConsultarPiratas_Handler,
		},
		{
			MethodName: "RegistrarCaptura",
			Handler:    _CazarrecompensasService_RegistrarCaptura_Handler,
		},
		{
			MethodName: "DecidirEntrega",
			Handler:    _CazarrecompensasService_DecidirEntrega_Handler,
		},
		{
			MethodName: "TransportarPirata",
			Handler:    _CazarrecompensasService_TransportarPirata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaccion.proto",
}

const (
	MarinaService_RecibirPirata_FullMethodName  = "/interaccion.MarinaService/RecibirPirata"
	MarinaService_RealizarRedada_FullMethodName = "/interaccion.MarinaService/RealizarRedada"
)

// MarinaServiceClient is the client API for MarinaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarinaServiceClient interface {
	RecibirPirata(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error)
	RealizarRedada(ctx context.Context, in *RedadaRequest, opts ...grpc.CallOption) (*RedadaResponse, error)
}

type marinaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarinaServiceClient(cc grpc.ClientConnInterface) MarinaServiceClient {
	return &marinaServiceClient{cc}
}

func (c *marinaServiceClient) RecibirPirata(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntregaResponse)
	err := c.cc.Invoke(ctx, MarinaService_RecibirPirata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marinaServiceClient) RealizarRedada(ctx context.Context, in *RedadaRequest, opts ...grpc.CallOption) (*RedadaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedadaResponse)
	err := c.cc.Invoke(ctx, MarinaService_RealizarRedada_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarinaServiceServer is the server API for MarinaService service.
// All implementations must embed UnimplementedMarinaServiceServer
// for forward compatibility.
type MarinaServiceServer interface {
	RecibirPirata(context.Context, *EntregaRequest) (*EntregaResponse, error)
	RealizarRedada(context.Context, *RedadaRequest) (*RedadaResponse, error)
	mustEmbedUnimplementedMarinaServiceServer()
}

// UnimplementedMarinaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarinaServiceServer struct{}

func (UnimplementedMarinaServiceServer) RecibirPirata(context.Context, *EntregaRequest) (*EntregaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecibirPirata not implemented")
}
func (UnimplementedMarinaServiceServer) RealizarRedada(context.Context, *RedadaRequest) (*RedadaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealizarRedada not implemented")
}
func (UnimplementedMarinaServiceServer) mustEmbedUnimplementedMarinaServiceServer() {}
func (UnimplementedMarinaServiceServer) testEmbeddedByValue()                       {}

// UnsafeMarinaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarinaServiceServer will
// result in compilation errors.
type UnsafeMarinaServiceServer interface {
	mustEmbedUnimplementedMarinaServiceServer()
}

func RegisterMarinaServiceServer(s grpc.ServiceRegistrar, srv MarinaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarinaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarinaService_ServiceDesc, srv)
}

func _MarinaService_RecibirPirata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntregaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarinaServiceServer).RecibirPirata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarinaService_RecibirPirata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarinaServiceServer).RecibirPirata(ctx, req.(*EntregaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarinaService_RealizarRedada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedadaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarinaServiceServer).RealizarRedada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarinaService_RealizarRedada_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarinaServiceServer).RealizarRedada(ctx, req.(*RedadaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarinaService_ServiceDesc is the grpc.ServiceDesc for MarinaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarinaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaccion.MarinaService",
	HandlerType: (*MarinaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecibirPirata",
			Handler:    _MarinaService_RecibirPirata_Handler,
		},
		{
			MethodName: "RealizarRedada",
			Handler:    _MarinaService_RealizarRedada_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaccion.proto",
}

const (
	SubmundoService_ComprarPirata_FullMethodName     = "/interaccion.SubmundoService/ComprarPirata"
	SubmundoService_EnviarMercenarios_FullMethodName = "/interaccion.SubmundoService/EnviarMercenarios"
)

// SubmundoServiceClient is the client API for SubmundoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmundoServiceClient interface {
	ComprarPirata(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error)
	EnviarMercenarios(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*RedadaResponse, error)
}

type submundoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmundoServiceClient(cc grpc.ClientConnInterface) SubmundoServiceClient {
	return &submundoServiceClient{cc}
}

func (c *submundoServiceClient) ComprarPirata(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntregaResponse)
	err := c.cc.Invoke(ctx, SubmundoService_ComprarPirata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submundoServiceClient) EnviarMercenarios(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*RedadaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedadaResponse)
	err := c.cc.Invoke(ctx, SubmundoService_EnviarMercenarios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmundoServiceServer is the server API for SubmundoService service.
// All implementations must embed UnimplementedSubmundoServiceServer
// for forward compatibility.
type SubmundoServiceServer interface {
	ComprarPirata(context.Context, *EntregaRequest) (*EntregaResponse, error)
	EnviarMercenarios(context.Context, *EntregaRequest) (*RedadaResponse, error)
	mustEmbedUnimplementedSubmundoServiceServer()
}

// UnimplementedSubmundoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubmundoServiceServer struct{}

func (UnimplementedSubmundoServiceServer) ComprarPirata(context.Context, *EntregaRequest) (*EntregaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComprarPirata not implemented")
}
func (UnimplementedSubmundoServiceServer) EnviarMercenarios(context.Context, *EntregaRequest) (*RedadaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarMercenarios not implemented")
}
func (UnimplementedSubmundoServiceServer) mustEmbedUnimplementedSubmundoServiceServer() {}
func (UnimplementedSubmundoServiceServer) testEmbeddedByValue()                         {}

// UnsafeSubmundoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmundoServiceServer will
// result in compilation errors.
type UnsafeSubmundoServiceServer interface {
	mustEmbedUnimplementedSubmundoServiceServer()
}

func RegisterSubmundoServiceServer(s grpc.ServiceRegistrar, srv SubmundoServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubmundoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubmundoService_ServiceDesc, srv)
}

func _SubmundoService_ComprarPirata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntregaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmundoServiceServer).ComprarPirata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmundoService_ComprarPirata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmundoServiceServer).ComprarPirata(ctx, req.(*EntregaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmundoService_EnviarMercenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntregaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmundoServiceServer).EnviarMercenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmundoService_EnviarMercenarios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmundoServiceServer).EnviarMercenarios(ctx, req.(*EntregaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmundoService_ServiceDesc is the grpc.ServiceDesc for SubmundoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmundoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaccion.SubmundoService",
	HandlerType: (*SubmundoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComprarPirata",
			Handler:    _SubmundoService_ComprarPirata_Handler,
		},
		{
			MethodName: "EnviarMercenarios",
			Handler:    _SubmundoService_EnviarMercenarios_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaccion.proto",
}

const (
	GobiernoService_PublicarListaPiratas_FullMethodName = "/interaccion.GobiernoService/PublicarListaPiratas"
	GobiernoService_RegistrarCaptura_FullMethodName     = "/interaccion.GobiernoService/RegistrarCaptura"
	GobiernoService_ActualizarReputacion_FullMethodName = "/interaccion.GobiernoService/ActualizarReputacion"
	GobiernoService_EmitirAlerta_FullMethodName         = "/interaccion.GobiernoService/EmitirAlerta"
)

// GobiernoServiceClient is the client API for GobiernoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GobiernoServiceClient interface {
	PublicarListaPiratas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListaPiratas, error)
	RegistrarCaptura(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error)
	ActualizarReputacion(ctx context.Context, in *ReputacionRequest, opts ...grpc.CallOption) (*ReputacionResponse, error)
	EmitirAlerta(ctx context.Context, in *AlertaRequest, opts ...grpc.CallOption) (*AlertaResponse, error)
}

type gobiernoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGobiernoServiceClient(cc grpc.ClientConnInterface) GobiernoServiceClient {
	return &gobiernoServiceClient{cc}
}

func (c *gobiernoServiceClient) PublicarListaPiratas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListaPiratas, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaPiratas)
	err := c.cc.Invoke(ctx, GobiernoService_PublicarListaPiratas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gobiernoServiceClient) RegistrarCaptura(ctx context.Context, in *EntregaRequest, opts ...grpc.CallOption) (*EntregaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntregaResponse)
	err := c.cc.Invoke(ctx, GobiernoService_RegistrarCaptura_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gobiernoServiceClient) ActualizarReputacion(ctx context.Context, in *ReputacionRequest, opts ...grpc.CallOption) (*ReputacionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReputacionResponse)
	err := c.cc.Invoke(ctx, GobiernoService_ActualizarReputacion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gobiernoServiceClient) EmitirAlerta(ctx context.Context, in *AlertaRequest, opts ...grpc.CallOption) (*AlertaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertaResponse)
	err := c.cc.Invoke(ctx, GobiernoService_EmitirAlerta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GobiernoServiceServer is the server API for GobiernoService service.
// All implementations must embed UnimplementedGobiernoServiceServer
// for forward compatibility.
type GobiernoServiceServer interface {
	PublicarListaPiratas(context.Context, *Empty) (*ListaPiratas, error)
	RegistrarCaptura(context.Context, *EntregaRequest) (*EntregaResponse, error)
	ActualizarReputacion(context.Context, *ReputacionRequest) (*ReputacionResponse, error)
	EmitirAlerta(context.Context, *AlertaRequest) (*AlertaResponse, error)
	mustEmbedUnimplementedGobiernoServiceServer()
}

// UnimplementedGobiernoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGobiernoServiceServer struct{}

func (UnimplementedGobiernoServiceServer) PublicarListaPiratas(context.Context, *Empty) (*ListaPiratas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicarListaPiratas not implemented")
}
func (UnimplementedGobiernoServiceServer) RegistrarCaptura(context.Context, *EntregaRequest) (*EntregaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarCaptura not implemented")
}
func (UnimplementedGobiernoServiceServer) ActualizarReputacion(context.Context, *ReputacionRequest) (*ReputacionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarReputacion not implemented")
}
func (UnimplementedGobiernoServiceServer) EmitirAlerta(context.Context, *AlertaRequest) (*AlertaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitirAlerta not implemented")
}
func (UnimplementedGobiernoServiceServer) mustEmbedUnimplementedGobiernoServiceServer() {}
func (UnimplementedGobiernoServiceServer) testEmbeddedByValue()                         {}

// UnsafeGobiernoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GobiernoServiceServer will
// result in compilation errors.
type UnsafeGobiernoServiceServer interface {
	mustEmbedUnimplementedGobiernoServiceServer()
}

func RegisterGobiernoServiceServer(s grpc.ServiceRegistrar, srv GobiernoServiceServer) {
	// If the following call pancis, it indicates UnimplementedGobiernoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GobiernoService_ServiceDesc, srv)
}

func _GobiernoService_PublicarListaPiratas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobiernoServiceServer).PublicarListaPiratas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GobiernoService_PublicarListaPiratas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobiernoServiceServer).PublicarListaPiratas(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GobiernoService_RegistrarCaptura_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntregaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobiernoServiceServer).RegistrarCaptura(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GobiernoService_RegistrarCaptura_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobiernoServiceServer).RegistrarCaptura(ctx, req.(*EntregaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GobiernoService_ActualizarReputacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReputacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobiernoServiceServer).ActualizarReputacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GobiernoService_ActualizarReputacion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobiernoServiceServer).ActualizarReputacion(ctx, req.(*ReputacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GobiernoService_EmitirAlerta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobiernoServiceServer).EmitirAlerta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GobiernoService_EmitirAlerta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobiernoServiceServer).EmitirAlerta(ctx, req.(*AlertaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GobiernoService_ServiceDesc is the grpc.ServiceDesc for GobiernoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GobiernoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaccion.GobiernoService",
	HandlerType: (*GobiernoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublicarListaPiratas",
			Handler:    _GobiernoService_PublicarListaPiratas_Handler,
		},
		{
			MethodName: "RegistrarCaptura",
			Handler:    _GobiernoService_RegistrarCaptura_Handler,
		},
		{
			MethodName: "ActualizarReputacion",
			Handler:    _GobiernoService_ActualizarReputacion_Handler,
		},
		{
			MethodName: "EmitirAlerta",
			Handler:    _GobiernoService_EmitirAlerta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaccion.proto",
}
